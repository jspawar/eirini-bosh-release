#!/usr/bin/env bash

set -euxo pipefail

echo "Configuring Eirini"

job_dir=/var/vcap/jobs/configure-eirini-bosh
export KUBECONFIG=${job_dir}/config/kube.conf
kubectl=/var/vcap/packages/kubectl/bin/kubectl

daemonset_name="eirini-loggregator-fluentd"

check_for_pod_failures() {
  # Sleeping b/c k8s... Events do not appear synchronously during script execution: after
  # the application of the DaemonSet the container the pods will begin failing
  # almost immediately, but there is just a tiny delay between actually failing
  # and appearing in whatever system `kubectl events` references.
  FAILING_PODS=$($kubectl get pods -n"<%= p('opi.system_namespace') %>" -l name="${daemonset_name}" --field-selector=status.phase!=Running -o custom-columns=:.metadata.name)
  sleep 1

  for POD in ${FAILING_PODS}; do
    echo "pod ${POD} failed:"
    $kubectl get events -n"<%= p('opi.system_namespace') %>" --field-selector involvedObject.name=${POD},reason==Failed -o custom-columns=:.message
    exit 1
  done
}

$kubectl apply -f <($kubectl create namespace "<%= p('opi.workloads_namespace') %>" --dry-run --save-config -o yaml)

$kubectl apply -f <($kubectl create secret generic loggregator-tls-certs-secret \
  -n "<%= p('opi.system_namespace') %>" \
  --dry-run \
  --save-config \
  --from-file=internal-ca-cert=${job_dir}/config/loggregator-ca.crt \
  --from-file=loggregator-agent-cert=${job_dir}/config/loggregator-agent.crt \
  --from-file=loggregator-agent-cert-key=${job_dir}/config/loggregator-agent.key \
  -o yaml)

echo "Setting up fluentd configuration"
$kubectl apply -f ${job_dir}/config/fluentd-configmap.yaml -n "<%= p('opi.system_namespace') %>"

echo "Setting up Eirini daemonsets"
$kubectl apply -f ${job_dir}/config/eirini-daemonset.yaml -n "<%= p('opi.system_namespace') %>"

time_dir=$(mktemp -d)
TIME_NOW=${time_dir}/now.timestamp
TIME_FINISH=${time_dir}/finish.timestamp

touch ${TIME_NOW}
# TODO: make timeout configurable
touch -d "10 minutes" ${TIME_FINISH}

# "-ot" is "older than"
while [ "${TIME_NOW}" -ot "${TIME_FINISH}" ]; do
  desired=$(${kubectl} get daemonset "${daemonset_name}" -n "<%= p('opi.system_namespace') %>" -o custom-columns=:.status.desiredNumberScheduled)
  numReady=$(${kubectl} get daemonset "${daemonset_name}" -n "<%= p('opi.system_namespace') %>" -o custom-columns=:.status.numberReady)

  if [ ${desired} -eq ${numReady} ]; then
    echo "Successfully applied the ${daemonset_name} DaemonSet"
    exit 0
	fi

  check_for_pod_failures

  echo "Sleeping for a second..."
	sleep 1
done

# failed to finish in time
echo "${daemonset_name} DaemonSet failed to deploy within configured timeout"
exit 1

